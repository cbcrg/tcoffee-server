import models.Field;
import models.OutItem;
import play.Logger;

/*
 * This script invoke the 'Piper' execution
 * The framework inject the following variables that are meant to 
 * be considered implicit object
 * - input: the data ented by the user 
 * - result: the object to which add the produced output
 * - context: the execution context object 
 */ 

 /*
  * Copy the select dataset to the target folder  
  */
def piperFolder = new File(context['bundle.path'], "rmp")
def heatmapScriptFile = new File(piperFolder, "qualityCheck/utility/heatmap.R")
def formattedGenomesFolder = new File(context['settings.piper.allgenomes.path'])
def inputGenomesFolder = new File(context['settings.piper.inputgenomes.path'])
def scratchFolder = new File(context['data.path'])
def timeout = 10 * 60 * 60 * 1000

assert piperFolder.exists(), "The Piper scripts folder does not exist: '$piperFolder'"
assert scratchFolder.exists(), "The folder where the job should run does not exists: '$scratchFolder'"
assert heatmapScriptFile.exists(), "Cannot file 'heatmap' script: '$heatmapScriptFile'" 


/* 
 * THE USER INPUT ENTRIES 
 * 
 * - context.query is the query as provided by the user in the iput form 
 * - context.genomes the array of genomes selected by the user  
 */
File query = context.query
def genomes = context.genomes

assert query, 			"Missing query object"
assert query.exists(),  "Missing query file"
assert genomes, 		"Missing genomes input"


/*
 *  Create the 'genomes' file requied by 'Piper' CLI containing the absolute path 
 *  to the selected genomes by the user
 */
def gtext = new StringBuilder()
genomes.split(' ,') .each {
	gtext << new File(inputGenomesFolder, it + '.fa').absolutePath << ' ' << it << '\n'
} 

def genomesFile = new File(scratchFolder, 'genomes')
genomesFile.text = gtext 


/*
 * prepare the 'allGenomesInfo' folder structure
 */
if( !formattedGenomesFolder.exists() ) formattedGenomesFolder.mkdirs()
def allGenomeInfoFolder = new File(scratchFolder,"allGenomeInfo")
assert allGenomeInfoFolder.mkdir(), "Cannot create 'allGenomeInfo folder at '$allGenomeInfoFolder'"

genomesFile.eachLine { String line ->
   def items = line.split('\\s+')
   assert items?.length == 2,  "Invalid entry '$line' in dataset file '$genomesFile'"
   
   // check that the referenced genome file exists
   def genomeFile = new File(items[0])
   assert genomeFile.exists(), "Missing genome file: '$genomeFile'"
   
   // create a link to the dbformat cache
   def alias = items[1]
   assert alias, "Missing alias for genome: '$genomeFile'"
   
   def cacheFolder = new File(formattedGenomesFolder,alias)
   assert cacheFolder.exists() || cacheFolder.mkdirs(), "Cannot create folder: '$cacheFolder'"

   "ln -s ${cacheFolder} ${alias}".execute(null, allGenomeInfoFolder)

}



/*
 * Launch the pipeline
 */

new File(scratchFolder,"run.sh").text = 
		"""\
		#!/bin/sh
		set -e
		export PATH="${piperFolder}:\$PATH"
		startPipeline.pl -genomes ${genomesFile} -query ${query} -experiment exp_1 -blast_strategy abblastn -blast blastn; 
		executePipeline.pl -step similarity -experiment exp_1 -pipeline_dir . 
		"""
		.stripIndent()

"chmod +x ./run.sh".execute(null,scratchFolder)
		
def proc = new ProcessBuilder("sh", "-c", "./run.sh")
		.directory(scratchFolder)
		.redirectErrorStream(true)
		.start()
		
def outFile = new File(scratchFolder,"pipeline.out")
Thread.start { outFile << proc.getInputStream() }
// wait for the pipeline termination and get the process exit-code (non zero --> error )
def exit = timeout ? proc.waitForOrKill(timeout) : proc.waitFor()

/*
 * folder that contains the pipeline result files 
 */
def experimentFolder = new File (scratchFolder, 'experiments/exp_1');


/*
 * Create the result object
 */
result.add( new OutItem(query,"input_file").label("Input sequences") );

if( outFile.exists() ) {
	result.add(new OutItem(outFile, "system_file"))	
}
else {
	Logger.warn "Missing script output file: '$outFile'"
}

if( exit ) return exit

/* 
 * Extra step to create the Heatmap 
 * 1) Check that exists the expected files generated by the pipeline
 * 2) Run the script. NOTE: the script MUST run in the folder where the 'simMatrix.csv' file is located  
 * 3) check the png exists and return the heatmap file
 */
def simMatrixFile = new File(experimentFolder,"simMatrix.csv")

// 1
assert experimentFolder.exists(), "The pipeline experiments path does not exist: '$experimentFolder'"
assert simMatrixFile.exists(), "The similarity matrix file does not exist: '$simMatrixFile'"

// 2
def cmd = ["R","CMD", "BATCH", heatmapScriptFile.toString()]
def r_proc = new ProcessBuilder(cmd).directory(experimentFolder).start()
exit = timeout ? r_proc.waitForOrKill(timeout) : r_proc.waitFor()

// 3
def heatmapFile = new File(experimentFolder,"heatMap.png")
if( heatmapFile.exists() ) {
	result.add(new OutItem(heatmapFile, "heatmap_file"))
}
else {
	Logger.warn "Piper: Missing heatmap file: $heatmapFile"
}

/*
 * terminated
 */
return exit



